[
    % TODO this is needed to deploy oneprovider on distributed env on dockers
    % Range of ports that will be used by erlang nodes to communicate
    {kernel,[
        {inet_dist_listen_min, 9100},
        {inet_dist_listen_max, 9139}
    ]},

    %% SASL config
    {sasl, [{sasl_error_logger, false}]},

    %% logger configuration
    {lager, [
        {colored, true},
        {handlers, [
            %% show info level or higher level logs at console
            {lager_console_backend, [{level, info}, {formatter, lager_default_formatter},
                {formatter_config, [color, "[", sev, " ", time, " ", pid, "] ", message, "\e[0m\r\n"]}]},
            %% rotate error log when it reaches 50 MB; keep 10 rotated logs
            {lager_file_backend, [
                {file, "{{platform_log_dir}}/error.log"},
                {level, error},
                {size, 52428800},
                {count, 10},
                {formatter, lager_default_formatter},
                {formatter_config, ["[", sev, " ", date, " ", time, " ", pid, "] ", message, "\n"]}
            ]},
            %% rotate info log when it reaches 50 MB; keep 10 rotated logs
            {lager_file_backend, [
                {file, "{{platform_log_dir}}/info.log"},
                {level, info},
                {size, 52428800},
                {count, 10},
                {formatter, lager_default_formatter},
                {formatter_config, ["[", sev, " ", date, " ", time, " ", pid, "] ", message, "\n"]}
            ]},
            %% rotate debug log when it reaches 50 MB; keep 10 rotated logs
            {lager_file_backend, [
                {file, "{{platform_log_dir}}/debug.log"},
                {level, debug},
                {size, 52428800},
                {count, 10},
                {formatter, lager_default_formatter},
                {formatter_config, ["[", sev, " ", date, " ", time, " ", pid, "] ", message, "\n"]}
            ]}
        ]},
        % Limit for the number of messages per second allowed from error_logger
        {error_logger_hwm, 200},
        % When lager should change mode to synchronous (log queue is longer than async_threshold)
        {async_threshold, 500},
        % When lager should return from synchronous mode to asynchronous (log queue is shorter than (async_threshold - async_threshold_window)
        {async_threshold_window, 50}
    ]},

    %% cluster_manager config
    {cluster_manager, [
        %% ===================================================================
        %% GENERAL
        %% ===================================================================

        %% How many worker nodes are expected to connect to cm - configured automatically by configurator.erl lib, used in GEN_DEV script
        {worker_num, undefined},
        % How often should load balancing advices be recomputed and sent to nodes [ms].
        {lb_advices_update_interval, 500},

        %% ===================================================================
        %% CLUSTER INIT STEPS
        %% ===================================================================

        {init_step_timeout, 30000}, % 30 seconds
        {start_default_workers_step_timeout, 120000}, % 2 minutes
        {start_custom_workers_step_timeout, 120000}, % 2 minutes
        {upgrade_cluster_step_timeout, 3600000}, % 1 hour
        {start_listeners_step_timeout, 30000}, % 30 seconds
        {ready_step_timeout, 30000}, % 30 seconds

        %% ===================================================================
        %% CLUSTER STATUS
        %% ===================================================================

        {cluster_status_caching_time, 15000}, % 15 seconds
        {cluster_component_healthcheck_timeout, 10000} % 10 seconds
    ]}
].
